# Q. What is this file?
# A. This file contains options which allow you to configure your multiworld experience while allowing
#    others to play how they want as well.
#
# Q. How do I use it?
# A. The options in this file are weighted. This means the higher number you assign to a value, the
#    more chances you have for that option to be chosen. For example, an option like this:
#
#    map_shuffle:
#      on: 5
#      off: 15
#
#    Means you have 5 chances for map shuffle to occur, and 15 chances for map shuffle to be turned
#    off.
#
# Q. I've never seen a file like this before. What characters am I allowed to use?
# A. This is a .yaml file. You are allowed to use most characters.
#    To test if your yaml is valid or not, you can use this website:
#        http://www.yamllint.com/
#    You can also verify that your Archipelago options are valid at this site:
#        https://archipelago.gg/check

# Your name in-game, limited to 16 characters.
#     {player} will be replaced with the player's slot number.
#     {PLAYER} will be replaced with the player's slot number, if that slot number is greater than 1.
#     {number} will be replaced with the counter value of the name.
#     {NUMBER} will be replaced with the counter value of the name, if the counter value is greater than 1.
name: Luigi

# Used to describe your yaml. Useful if you have multiple files.
description: Default Luigi's Mansion Template

game: Luigi's Mansion
requires:
  version: 0.6.3 # Version of Archipelago required for this yaml to work as expected.

Luigi's Mansion:
  ################
  # Game Options #
  ################
  progression_balancing:
    # A system that can move progression earlier, to try and prevent the player from getting stuck and bored early.
    # 
    # A lower setting means more getting stuck. A higher setting means less getting stuck.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 99
    random: 0
    random-low: 0
    random-high: 0
    disabled: 0 # equivalent to 0
    normal: 50 # equivalent to 50
    extreme: 0 # equivalent to 99

  accessibility:
    # Set rules for reachability of your items/locations.
    # 
    # **Full:** ensure everything can be reached and acquired.
    # 
    # **Minimal:** ensure what is needed to reach your goal can be acquired.
    full: 50
    minimal: 0

  death_link:
    # When you die, everyone who enabled death link dies. Of course, the reverse is true too.
    'false': 50
    'true': 0

  ###################
  # Extra Locations #
  ###################
  furnisanity:
    # Adds interactable objects, such as dressers, paintings, candles, and light fixtures, to the location pool.
    # 
    # Different sets of locations can be added within the list. Valid strings are:
    # 
    # "Hangables" includes items on walls such as paintings and other decor
    # 
    # "Decor" includes items such as instruments and suits of armor
    # 
    # "Ceiling" includes ceiling fans and lights attached to the ceiling
    # 
    # "Candles" includes any candles that can be interacted with
    # 
    # "Seating" includes chairs, stools and other typs of seating
    # 
    # "Surfaces" includes tables and other flat items
    # 
    # "Storage" includes things like barrels, boxes and shelves
    # 
    # "Plants" includes all waterable plants in the mansion
    # 
    # "Drawers" includes dressers, drawers, end tables and similar items
    # 
    # "Treasures" turns on only locations that contain treasure (including all plants) in the vanilla game. Does not create duplicate locations
    # 
    # "Basement, 1st Floor, 2nd FLoor, Attic, and Roof can be used to turn on all furniture pieces on that level.
    # 
    # "Full" turns on all furniture locations and will override any other specified groups
    [Treasures, Drawers, Storage, Decor, Plants]

  toadsanity:
    # Add Toads as locations to be checked.
    'false': 0
    'true': 50

  gold_mice:
    # Adds Gold Mice as locations to be checked.
    # 
    # Logic requires these to be obtained after blackout so they can't be missed. They can be acquired without black out, out of logic.
    'false': 50
    'true': 0

  boosanity:
    # Turns Boos into Items and Locations.
    'false': 50
    'true': 0

  portrification:
    # Turn Portrait Ghosts into checks in addition to their clear chests.
    'false': 0
    'true': 50

  speedy_spirits:
    # Adds Blue Ghosts to location pool. These have moved to be only available during blackout so they cannot be missed
    'false': 50
    'true': 0

  lightsanity:
    # Adds the act of lighting up rooms as locations.
    'false': 0
    'true': 50

  walksanity:
    # Adds the act of visiting rooms as locations.
    'false': 0
    'true': 50

  ##################
  # Access Options #
  ##################
  rank_requirement:
    # Choose the required rank (H to A) to complete the game, with A being the highest.
    # 
    # Rank H requires any amount of money to finish the game, including 0
    # 
    # Rank A requires 5 Gold Diamonds (or equivalent money) to finish the game
    rank_h: 50
    rank_g: 0
    rank_f: 0
    rank_e: 0
    rank_d: 0
    rank_c: 0
    rank_b: 0
    rank_a: 0

  game_mode:
    # Enable alternate game modes:
    # 
    # Default - Play through the mansion as usual
    # 
    # Poltergust Hunt - You must first find the Poltergust 3000 inside a piece of furniture before use. Enabling this will
    # automatically add certain pieces of furniture to the pool of locations even if other furniture options are turned off.
    # This will also unlock all doors in the mansion. This is intended as a short form game mode
    default: 50
    poltergust_hunt: 0

  vacuum_start:
    # Enable Luigi to have the Poltergust 3000 at the start
    'false': 0
    'true': 50

  mario_items:
    # How many Mario Items it takes to capture the Fortune-Teller. 0 = Starts Capturable
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 5
    5: 50
    random: 0
    random-low: 0
    random-high: 0

  boo_gates:
    # Toggle the events that prevent progress unless a certain number of boos have been caught
    # 
    # Default to on. If this is turned off, the Boo Count options are ignored.
    'false': 0
    'true': 50

  balcony_boo_count:
    # Set the number of Boos required to reach the Balcony. 0 = Starts Open
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 36
    15: 50
    random: 0
    random-low: 0
    random-high: 0

  final_boo_count:
    # Set the number of Boos required to reach the Secret Altar. 0 = Starts Open
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 50
    35: 50
    random: 0
    random-low: 0
    random-high: 0

  enemizer:
    # Choose if and how ghosts are randomized.
    # 
    # Vanilla - No ghost randomization
    # 
    # Randomized Elements - Randomized ghost elements and waves
    # 
    # No Elements - Remove ghost elements, randomize waves
    vanilla: 50
    randomized_elements: 0
    no_elements: 0

  door_rando:
    # Various options regarding which doors are locked or unlocked in the mansion.
    # 
    # Off - Doors are in their vanilla state
    # 
    # Randomized - All doors are randomly locked or unlocked
    # 
    # Suit Doors - Randomize doors but guarantee the Suit Key Doors remain locked
    # 
    # All Doors Unlocked - Unlocks all doors in the mansion. Without Boo gates, this will make King Boo immediately accessible.
    # 
    # All Doors Locked - Locks all door in the mansion.
    'off': 50
    randomized: 0
    suit_doors: 0
    all_doors_unlocked: 0
    all_doors_locked: 0

  random_spawn:
    # Allows Luigi to randomly spawn somewhere in the mansion.
    'false': 0
    'true': 50

  early_first_key:
    # If enabled, this will attempt to find a key that lets you out of your starting room and place it early in your own world.
    'false': 0
    'true': 50

  ###############
  # QOL Changes #
  ###############
  trap_link:
    # Games that support traplink will all receive similar traps when a matching trap is sent from another traplink game
    'false': 50
    'true': 0

  energy_link:
    # Games that support energylink will be able to send and retrieve 'energy' from the team's pool. 
    # If no team is present, the default team will be used (0).
    # 
    # 'Energy' in the context of Luigi's Mansion will be money.
    'false': 50
    'true': 0

  trap_percentage:
    # Set the percentage of filler items that are traps. Default percentage is 0%
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 100
    5: 50
    random: 0
    random-low: 0
    random-high: 0

  enable_fear_animation:
    # Turn on Luigi being scared by ghosts if they spawn close to him.
    # Set this to false if you want to turn it off
    'false': 0
    'true': 50

  enable_pickup_animation:
    # Turn on Luigi's pickup animations.
    # Set this to false if you want to turn these animations off.
    'false': 50
    'true': 0

  walk_speed:
    # Choose how fast Luigi moves. Speeds above normal may cause OoB issues
    normal_speed: 50
    kinda_fast: 0
    schmoovin: 0

  luigi_max_health:
    # Adjust Luigi's maximum health value, 1-1000. Values 5 or below should be treated as One-Hit KO
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 1
    # Maximum value is 1000
    100: 50
    random: 0
    random-low: 0
    random-high: 0

  good_vacuum:
    # Choose whether to include the Poltergust 4000.
    # 
    # If you start with the upgrade on a no-poltergust start, you will receive the base poltergust instead
    start_with: 0
    include: 50
    exclude: 0

  king_boo_health:
    # Set King Boo's health in the final fight.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 1
    # Maximum value is 1000
    500: 50
    random: 0
    random-low: 0
    random-high: 0

  boolossus_difficulty:
    # Alter the difficulty of the mini-boos in the Boolossus fight. Easy slows them down, Hard speeds them up.
    easy: 0
    normal: 50
    hard: 0

  boo_radar:
    # Start with Boo Radar
    # 
    # start_with: Start with Boo Radar
    # 
    # include: Boo Radar in pool
    # 
    # exclude: No Boo Radar - generation will fail if excluded while Boo Gates or Boosanity are enabled
    start_with: 0
    include: 50
    exclude: 0

  hidden_mansion:
    # Begin in the Hidden Mansion
    'false': 50
    'true': 0

  hint_distribution:
    # Choose the level of hint from in-game hints. Will affect Portrait Ghost hints if the option is on.
    balanced: 50
    junk: 0
    chaos: 0
    strong: 0
    vague: 0
    disabled: 0

  portrait_hints:
    # Choose to add hints to the scans of the Portrait Ghosts' Hearts in the mansions
    'false': 50
    'true': 0

  boo_health_option:
    # Choose how Boo Health is determined
    # 
    # Choice: Use Boo Health Value to set all boos to the specified value
    # 
    # Random Values: Every boo has a different, randomly chosen health value between 1 and the value set in Boo Health Value
    # 
    # Boo Health by Sphere: Boos will receive health values based on the spheres they are in. Boo Health Value will determine the highest health a Boo can have
    # 
    # Vanilla: No changes are made to Boos from the base game. Boos with HP over 150 may not be catchable within the current room and logic cannot account for where they move
    choice: 50
    random_values: 0
    boo_health_by_sphere: 0
    vanilla: 0

  boo_health_value:
    # Choose the health value all Boos will have if the Boo Health Option is Choice. Range between 1 and 999
    # If boo_health_option is set to random_values, if you set this to "100: 50", the max value used will be 100 instead.
    # If you want a custom range, use a random range function: https://archipelago.gg/tutorial/Archipelago/advanced_settings_en#random-numbers
    # 
    # Values over 150 may not be catchable within the current room and logic cannot account for where they move
    # 
    # If you have a boo go into an area you cannot access yet, you may need to save and quit to main menu to reload them.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 1
    # Maximum value is 999
    50: 50
    random: 0
    random-low: 0
    random-high: 0

  boo_speed:
    # Choose how fast boos move. Range from 1 to 36
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 1
    # Maximum value is 36
    15: 50
    random: 0
    random-low: 0
    random-high: 0

  boo_escape_time:
    # Choose how long before Boos leave the current room. Range between 1 and 300.
    # 
    # Values below 90 may not be catchable within the current room and logic cannot account for where they move
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 1
    # Maximum value is 300
    120: 50
    random: 0
    random-low: 0
    random-high: 0

  boo_anger:
    # Choose whether boos can damage Luigi.
    'false': 0
    'true': 50

  extra_boo_spots:
    # Adds extra spots for boos to hide in when furniture locations have been added to the pool
    'false': 50
    'true': 0

  ##################
  # Filler Weights #
  ##################
  bundle_weight:
    # Set the weight for how often coin & bill bundles get chosen as filler.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 100
    20: 50
    random: 0
    random-low: 0
    random-high: 0

  coin_weight:
    # Set the weight for how often coins get chosen as filler.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 100
    15: 50
    random: 0
    random-low: 0
    random-high: 0

  bill_weight:
    # Set the weight for how often bills get chosen as filler.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 100
    10: 50
    random: 0
    random-low: 0
    random-high: 0

  bars_weight:
    # Set the weight for how often gold bars get chosen as filler.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 100
    15: 50
    random: 0
    random-low: 0
    random-high: 0

  gems_weight:
    # Set the weight for how often gemstones get chosen as filler.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 100
    5: 50
    random: 0
    random-low: 0
    random-high: 0

  poison_trap_weight:
    # Set the weight for how often poison mushrooms get chosen as traps.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 100
    15: 50
    random: 0
    random-low: 0
    random-high: 0

  bomb_trap_weight:
    # Set the weight for how often bombs get chosen as traps.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 100
    15: 50
    random: 0
    random-low: 0
    random-high: 0

  ice_trap_weight:
    # Set the weight for how often ice traps get chosen as traps.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 100
    15: 50
    random: 0
    random-low: 0
    random-high: 0

  banana_trap_weight:
    # Set the weight for how often bananas get chosen as traps.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 100
    15: 50
    random: 0
    random-low: 0
    random-high: 0

  poss_trap_weight:
    # Set the weight for how often possession traps get chosen as traps.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 100
    10: 50
    random: 0
    random-low: 0
    random-high: 0

  bonk_trap_weight:
    # Set the weight for how often bonk traps get chosen as traps.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 100
    15: 50
    random: 0
    random-low: 0
    random-high: 0

  ghost_weight:
    # Set the weight for how often ghosts get chosen as traps.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 100
    15: 50
    random: 0
    random-low: 0
    random-high: 0

  fear_weight:
    # Set the weight for how often fear traps get chosen as traps.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 100
    25: 50
    random: 0
    random-low: 0
    random-high: 0

  spooky_weight:
    # Set the weight for how often spooky time gets chosen as a trap.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 100
    30: 50
    random: 0
    random-low: 0
    random-high: 0

  squash_weight:
    # Set the weight for how often Squash traps get chosen as traps.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 100
    15: 50
    random: 0
    random-low: 0
    random-high: 0

  vac_trap_weight:
    # Set the weight for how often No Vac traps get chosen as traps.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 100
    5: 50
    random: 0
    random-low: 0
    random-high: 0

  dust_weight:
    # Set the weight for how often dust is chosen as filler.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 100
    40: 50
    random: 0
    random-low: 0
    random-high: 0

  heart_weight:
    # Set the weight for how often hearts get chosen as filler.
    #
    # You can define additional values between the minimum and maximum values.
    # Minimum value is 0
    # Maximum value is 100
    10: 50
    random: 0
    random-low: 0
    random-high: 0

  #############
  # Cosmetics #
  #############
  random_music:
    # Randomize Music
    'false': 50
    'true': 0

  door_model_rando:
    # Randomly choose models for every door in the mansion.
    'false': 0
    'true': 50

  chest_types:
    # Determines how chest colors and size are chosen,
    # 
    # vanilla: Chests are their original size and color
    # 
    # default: Size and color are determined by attempting to match the item type to a representative color similar to the vanilla game
    # 
    # full_random: Size and color are chosen completely at random.
    # 
    # color: Chest color represents the AP item classification
    # 
    # size_and_color: Both size and color are determined by AP item classification
    # 
    # no_fuzzy_matching: Same as default but uses item classification for other players' items
    vanilla: 50
    default: 0
    full_random: 0
    color: 0
    size_and_color: 0
    no_fuzzy_matching: 0

  trap_chests:
    # Determines if chests containing traps can look like progression items
    # 
    # filler: Trap chests only appear as traps
    # 
    # progression: Trap chests only appear as progression
    # 
    # anything: Trap chests can appear as anything
    filler: 50
    progression: 0
    anything: 0

  call_mario:
    # Let everyone know you're looking for Mario in the client!
    # (CAUTION: THIS CAN EASILY SPAM THE CLIENT WITH MESSAGES)
    'false': 5
    'true': 50

  ###########################
  # Item & Location Options #
  ###########################
  local_items:
    # Forces these items to be in their native world.
    []

  non_local_items:
    # Forces these items to be outside their native world.
    []

  start_inventory:
    # Start with these items.
    {}

  start_inventory_from_pool:
    # Start with these items and don't place them in the world.
    # 
    # The game decides what the replacement items will be.
    {}

  start_hints:
    # Start with these item's locations prefilled into the ``!hint`` command.
    []

  start_location_hints:
    # Start with these locations and their item prefilled into the ``!hint`` command.
    []

  exclude_locations:
    # Prevent these locations from having an important item.
    []

  priority_locations:
    # Prevent these locations from having an unimportant item.
    [Courtyard Birdhouse, 
    Twins' Room Clear Chest, 
    Projection Room Clear Chest, 
    Laundry Room Washing Machine, 
    Observatory Shoot the Moon,
    Foyer Toad, 
    Courtyard Toad, 
    1F Washroom Toad, 
    Wardrobe Balcony Toad, 
    Storage Room Cage Button]

  item_links:
    # Share part of your item pool with other players.
    []

  plando_items:
    # Generic items plando.
    []
